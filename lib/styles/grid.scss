$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
  xga: 1600px,
  fhd: 1920px,
  rt: 2560px
);

$displays: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px,
  xga: 1530px,
  fhd: 1830px,
  rt: 2470px
);

$columns: 12 !default;
$gutter: 1.5rem !default;
$container-padding-x: $gutter * .5 !default;

@function breakpoint-min($name) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-infix($name) {
  @return if(breakpoint-min($name) == null, "", "-#{$name}");
}

@mixin media-breakpoint-up($name) {
  $min: breakpoint-min($name);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

.container,
.container-fluid {
  width: 100%;
  padding-right: $container-padding-x;
  padding-left: $container-padding-x;
  margin-right: auto;
  margin-left: auto;
}

@each $breakpoint, $container-max-width in $displays {
  .container-#{$breakpoint} {
    @extend .container-fluid;
  }

  @include media-breakpoint-up($breakpoint) {
    %responsive-container-#{$breakpoint} {
      max-width: $container-max-width;
    }

    $extend-breakpoint: true;

    @each $name, $width in $breakpoints {
      @if ($extend-breakpoint) {
        .container#{breakpoint-infix($name)} {
          @extend %responsive-container-#{$breakpoint};
        }

        @if ($breakpoint == $name) {
          $extend-breakpoint: false;
        }
      }
    }
  }
}

@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-right: calc(-.5 * #{$gutter});
  margin-left: calc(-.5 * #{$gutter});
}

.row {
  @include make-row();
}

@function divide($dividend, $divisor, $precision: 10) {
  $sign: if($dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0, 1, -1);
  $dividend: abs($dividend);
  $divisor: abs($divisor);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error 'Cannot divide by 0';
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;
  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * .1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;
  $dividend-unit: unit($dividend);
  $divisor-unit: unit($divisor);
  $unit-map: (
    "px": 1px,
    "rem": 1rem,
    "em": 1em,
    "%": 1%
  );
  @if ($dividend-unit != $divisor-unit and map-has-key($unit-map, $dividend-unit)) {
    $result: $result * map-get($unit-map, $dividend-unit);
  }
  @return $result;
}

@mixin make-col($size) {
  box-sizing: border-box;
  max-width: 100%;
  padding-right: calc(#{$gutter} * .5);
  padding-left: calc(#{$gutter} * .5);
  flex: 0 0 auto;
  width: percentage(divide($size, $columns));
}

@mixin row-cols($count) {
  > * {
    flex: 0 0 auto;
    width: divide(100%, $count);
  }
}

.col {
  box-sizing: border-box;
  max-width: 100%;
  padding-right: calc(#{$gutter} * .5);
  padding-left: calc(#{$gutter} * .5);
  flex: 0 0 auto;
}

@each $breakpoint in map-keys($breakpoints) {
  $infix: breakpoint-infix($breakpoint);

  @include media-breakpoint-up($breakpoint) {
    .col#{$infix} {
      flex: 1 0 0;
    }

    @if $columns > 0 {
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i);
        }
      }
    }
  }
}

